import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import com.github.puzzle.buildsrx.GameScanner
import com.github.puzzle.buildsrx.GenericTransformer
import com.github.puzzle.buildsrx.transformers.*

plugins {
    id 'java'
    id 'maven-publish'
    id 'com.gradleup.shadow' version '9.0.0-beta8'
}

sourceSets {
    api
    backend_0_4_0
    commonBackend
}

group = 'com.github'
version = '69.69.69'

repositories {
    mavenCentral()
    maven {
        name = 'Jitpack'
        url = 'https://jitpack.io'
    }
//    ivy {
//        setName("CosmicArchive");
//        url("https://github.com/CRModders/CosmicArchive/raw/main/versions/alpha")
//
//        patternLayout {
//            artifact("/[revision]/[classifier]/Cosmic Reach-[revision].jar");
//            artifact("/[revision]/[classifier]/Cosmic Reach-Server-[revision].jar");
//        }
//
//        metadataSources {
//            artifact()
//            ignoreGradleMetadataRedirection()
//        }
//
//        content {
//            includeModule("finalforeach", "cosmicreach-alpha");
//        }
//    }
}

def setupConfiguration(Configuration configuration, boolean isCompile) {
    configurations.getAsMap().keySet().forEach {
        if (it.contains("backend_") || it.contains("commonBackend")) {
            if (!isCompile && !it.contains("Compile")) {
                configurations.getByName((String) it).extendsFrom(configuration)
            } else if (isCompile && !it.contains("Implementation")) {
                configurations.getByName((String) it).extendsFrom(configuration)
            }
        }
    }
}

def setupConfiguration2(Configuration configuration, boolean isCompile) {
    configurations.getAsMap().keySet().forEach {
        if (it.contains("backend_")) {
            if (!isCompile && !it.contains("Compile")) {
                configurations.getByName((String) it).extendsFrom(configuration)
            } else if (isCompile && !it.contains("Implementation")) {
                configurations.getByName((String) it).extendsFrom(configuration)
            }
        }
    }
}

configurations {
    loneRequire
    require
    embed

    api
    apiImplementation.extendsFrom(api)

    compile
    apiCompileOnly.extendsFrom(compile)
}

setupConfiguration(configurations.require, false)
setupConfiguration(configurations.embed, false)
setupConfiguration(configurations.compile, true)
setupConfiguration2(configurations.loneRequire, false)

var crClientUrl = "https://github.com/CRModders/CosmicArchive/raw/refs/heads/main/versions/alpha/${cosmicReachVersion}/client/Cosmic%20Reach-${cosmicReachVersion}.jar"
//var crServerUrl = "https://github.com/CRModders/CosmicArchive/raw/refs/heads/main/versions/alpha/${cosmicReachVersion}/server/Cosmic%20Reach-Server-${cosmicReachVersion}.jar"

File libFolder = file("lib")
if (!libFolder.exists()) libFolder.mkdir()

//File crFileServer = file("lib/cr${cosmicReachVersion}-server.jar")
//if (!crFileServer.exists()) {
//    try {
//        new URL(crServerUrl).withInputStream { i -> crFileServer.withOutputStream { it << i}}
//    } catch (Exception ignore) {
//        new URL(crServerUrl.replaceAll("%20", "-")).withInputStream { i -> crFileServer.withOutputStream { it << i}}
//    }
//}

File crFileClient = file("lib/cr${cosmicReachVersion}-client.jar")
if (!crFileClient.exists()) {
    try {
        new URL(crClientUrl).withInputStream { i -> crFileClient.withOutputStream { it << i}}
    } catch (Exception ignore) {
        new URL(crClientUrl.replaceAll("%20", "-")).withInputStream { i -> crFileClient.withOutputStream { it << i}}
    }
}

dependencies {
    compile 'org.jetbrains:annotations:24.0.0'

    api "com.badlogicgames.gdx:gdx:$gdxVersion"
    api "com.github.FinalForEach:Cosmic-Reach-Save-Library:$saveLibVersion"

    require "com.github.PuzzlesHQ:PuzzleLoader:${puzzleVersion}:client"
    embed files("./lib/api.jar")
//    require files(crFileServer)
    require files(crFileClient)
//    require "finalforeach:cosmicreach-alpha:${cosmicReachVersion}"

    loneRequire sourceSets.commonBackend.output
}

processBackend_0_4_0Resources {
    // Locations of where to inject the properties
    def resourceTargets = [ "puzzle.mod.json" ]

    // Left item is the name in the target, right is the varuable name
    def replaceProperties = [
            "crVersion"     : cosmicReachVersion,
            "version"       : version.split("-")[0]
    ]

    inputs.properties replaceProperties
    replaceProperties.put "project", project
    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

compileApiJava {

}

tasks.register("buildAPI", Jar) {
    group = "buildSrc"
    from sourceSets.api.output

    doLast {
        GameScanner.scan(crFileClient)

        GenericTransformer.process(
                archiveFile.get().getAsFile(),
                new ClassPreProcessor(null),
        )

        GenericTransformer.transform(
                archiveFile.get().getAsFile(),
                new DefaultClassTransformer(),
                new ApiClassTransformer(),
                new RedirectClassTransformer(),
                new MemberRemoveClassTransformer(),
        )

        /* Rename & Move archive from /build/libs/api-x.y.z.jar to /lib/api.jar */
        File archive = new File(archiveFile.get().getAsFile().absolutePath);
        archive.renameTo(new File("$projectDir/lib/api.jar"))
    }
}

tasks.register("buildBackend", ShadowJar) {
    group = "buildSrc"
    configurations = [ project.configurations.embed ]

    dependsOn("buildAPI")

    archiveBaseName = "cosmic-api"

    archiveVersion = version

    from sourceSets.commonBackend.output
    from sourceSets.backend_0_4_0.output
    from processBackend_0_4_0Resources.outputs
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = "cosmic-api"

            artifact source: buildBackend, extension: 'jar'
//            artifact source: buildMergedBundleJar, extension: 'jar'
        }
    }
}

wrapper {
    gradleVersion = "8.5"
    distributionType = Wrapper.DistributionType.ALL
}